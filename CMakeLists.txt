cmake_minimum_required(VERSION 2.6)
# Make sure it's an out-of-stream build
IF(${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
	MESSAGE(FATAL_ERROR "Please invoke CMake from a different directory than the source.")
ENDIF(${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
SET(CMAKE_DISABLE_SOURCE_CHANGES ON)
SET(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
MESSAGE(STATUS "Configuring your system to build psp-maps.")
SET(PSPMAPS_VERSION 2.3)
PROJECT(pspmaps C)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR})
SET(CMAKE_CURRENT_SOURCE_DIR ${PROJECT_SOURCE_DIR})
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Modules/)
SET(
   SOURCES
   global.c
   kml.c
   pspmaps.c
)
MESSAGE(STATUS "Searching for system packages.")
Find_Package(SDL REQUIRED)
Find_Package(SDL_image REQUIRED)
Find_Package(SDL_gfx REQUIRED)
Find_Package(SDL_ttf REQUIRED)
Find_Package(SDL_mixer REQUIRED)
Find_Package(LibXml2 REQUIRED)
Find_Package(CURL REQUIRED)
IF(UNIX)
   SET(MY_MATH_LIB -lm)
ELSE(UNIX)
   SET(MY_MATH_LIB)
ENDIF(UNIX)
IF(NOT SDL_FOUND)
   MESSAGE(FATAL_ERROR "SDL not found!")
ENDIF(NOT SDL_FOUND)
IF(NOT SDLIMAGE_FOUND)
   MESSAGE(FATAL_ERROR "SDL_image not found!")
ENDIF(NOT SDLIMAGE_FOUND)
IF(NOT SDLGFX_FOUND)
   MESSAGE(FATAL_ERROR "SDL_gfx not found!")
ENDIF(NOT SDLGFX_FOUND)
IF(NOT SDLTTF_FOUND)
   MESSAGE(FATAL_ERROR "SDL_ttf not found!")
ENDIF(NOT SDLTTF_FOUND)
IF(NOT SDLMIXER_FOUND)
   MESSAGE(FATAL_ERROR "SDL_mixer not found!")
ENDIF(NOT SDLMIXER_FOUND)
IF(NOT LIBXML2_FOUND)
   MESSAGE(FATAL_ERROR "LIBXML2 not found!")
ENDIF(NOT LIBXML2_FOUND)
IF(NOT CURL_FOUND)
   MESSAGE(FATAL_ERROR "CURL not found!")
ENDIF(NOT CURL_FOUND)
include_directories(
   ${PROJECT_SOURCE_DIR}
   ${SDL_INCLUDE_DIR}
   ${SDLIMAGE_INCLUDE_DIR}
   ${SDLGFX_INCLUDE_DIR}
   ${SDLTTF_INCLUDE_DIR}
   ${SDLMIXER_INCLUDE_DIR}
   ${LIBXML2_INCLUDE_DIR}
   ${CURL_INCLUDE_DIR}
) 
link_libraries(
   ${SDL_LIBRARY}
   ${SDLIMAGE_LIBRARY}
   ${SDLGFX_LIBRARY}
   ${SDLTTF_LIBRARY}
   ${SDLMIXER_LIBRARY}
   ${LIBXML2_LIBRARIES}
   ${CURL_LIBRARY}
   ${MY_MATH_LIB}
   pspmaps
)
add_executable(pspmaps ${SOURCES})
